package gorm

import (
	"github.com/rhine-tech/scene/lens/authentication"
	"github.com/spf13/cast"
)

type tableUser struct {
	// UserID unique id. Should be generated by the server.
	UserID uint64 `gorm:"unique;primaryKey;autoIncrement:true"`
	// Username unique name. Should be input by the user.
	Username string `gorm:"unique;type:varchar(128)"`
	// Password just password. For now, store in plain text.
	Password string `gorm:"type:varchar(128)"`
	// Email user's email address.
	Email string `gorm:"type:varchar(128)"`

	// Associations
	Info tableUserInfo `gorm:"foreignKey:UserID"`
}

func (t tableUser) toUser() authentication.User {
	return authentication.User{
		UserID:   cast.ToString(t.UserID),
		Username: t.Username,
		Email:    t.Email,
	}
}

func (tableUser) TableName() string {
	return authentication.Lens.TableName("users")
}

type tableUserInfo struct {
	UserID      uint64
	DisplayName string
	Avatar      string
}

func (tableUserInfo) TableName() string {
	return authentication.Lens.TableName("user_infos")
}
